#!/bin/sh

set -e

# Source debconf library
. /usr/share/debconf/confmodule

#db_version 2.0
db_capb backup

# possible states
REQUIREMENTS=1
IDENTITY_DIR=2

STATE=$REQUIREMENTS
ERR_NO_ERROR=0
ERR_CONTINUE=1
ERR_BACK=2

ERR_STATE=0

# ask the user if they want to continue by prompting
# the template provided as first argument.
# sets the error state corresponding to the user's answer.
error_ask_continue () {
      ERR_STATE=$ERR_BACK
      db_input high $1
      db_go
      db_get $1
      if [ "$RET" = "true" ]; then
            ERR_STATE=$ERR_CONTINUE
      fi
}

# select the next state to go to, i.e. 'next state'
# if everything is ok or if the user has chosen to
# continue
next_state () {
      if [ "$ERR_STATE" != "$ERR_BACK" ]; then
            STATE=$(($STATE + 1))
      fi
      ERR_STATE=$ERR_NO_ERROR
}

go_back () {
      STATE=$(($STATE - 1))
      ERR_STATE=$ERR_NO_ERROR
}

while [ "$STATE" != 0 -a "$STATE" != 3 ]; do
case "$STATE" in
      # requirements infos
      "$REQUIREMENTS")
            db_input high storagenode/requirements || true
            db_go;
            next_state
      ;;
      "$IDENTITY_DIR")
            # identity directory
            db_input high storagenode/identitydir || true
            if db_go; then
                  # check that the directory exists
                  db_get storagenode/identitydir
                  provided_dir=`echo "$RET" | xargs`

                  if [ -z "$provided_dir" ]; then
                        error_ask_continue storagenode/identitydir/empty_string_continue
                  elif [ ! -d $provided_dir ] ; then
                        error_ask_continue storagenode/identitydir/directory_does_not_exist_continue
                  else
                        if [ ! -f "$provided_dir/ca.cert" ]; then
                              error_ask_continue storagenode/identitydir/no_ca_cert_continue
                        fi
                        if [ "$ERR_STATE" != "$ERR_BACK" -a ! -f "$provided_dir/identity.cert" ]; then
                              error_ask_continue storagenode/identitydir/no_identity_cert_continue
                        fi
                        if [ "$ERR_STATE" != "$ERR_BACK" -a ! -f "$provided_dir/identity.key" ]; then
                              error_ask_continue storagenode/identitydir/no_identity_key_continue
                        fi
                  fi
                  next_state
            else
                  # the user has chosen to go back
                  go_back
            fi
      ;;
      esac
done
# wallet address
#db_input high storagenode/wallet || true
#db_go

# email
#db_input high storagenode/email || true
#db_go

# external address
#db_input high storagenode/external_addr || true
#db_go

# storage directory
#while [ "$storagedir" = "" ]; do
      # Get storage dir
#      db_input high storagenode/storagedir || true
#      db_go
#      storagedir="$RET"
#done

# allocated disk space
#db_input high storagenode/diskspace || true
#db_go

# advertised bandwidth
#db_input high storagenode/bandwidth || true
#db_go


